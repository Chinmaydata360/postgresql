-- business problems
-- advance analysis

/*
1 top selling products
query the top 10 product by total sale value
challenge :include product name,totalquentity sold , and total sales value
*/

select * from order_items;
select * from products;
select * from orders;


-- creating new columns
alter table order_items
add column total_sales float;

-- updating price qty * price per unit
update order_items
set total_sales = quantity * price_per_unit;



select 
 oi.product_id,
 p.product_name,
 round(sum(oi.total_sales)) as total_sale,
 count(o.order_id) as total_orders
from orders as o
join
order_items as oi
on
oi.order_id=o.order_id
join
products as p
on
p.product_id=oi.product_id
group by 
1,2 
order by
3 desc
limit 10;

/*
q2 revenue by category
calculate total revenue generated by each product category
callenge include the percentage of contribution of each category to total revenue;
*/

select * from order_items;
select * from products;
select * from category;


select 
c.category_id,
c.category_name,
sum(oi.total_sales) as total_sales,
sum((oi.total_sales)/ (select sum(total_sales) from order_items))*100 as per_sale
from 
order_items as oi
left join
products as p
on
oi.product_id=p.product_id
 join
category as c
on 
p.category_id=c.category_id
group by 
1,2
order by 3 desc;

/*
q3 average order value (AOV)
compute the average order value for each customer
challenge include only with more than 5 orders
*/

select * from order_items;
select * from orders;


select 
c.customer_id,
concat(c.first_name,' ',c.last_name) as full_name,
sum(total_sales)/count(o.order_id) as aov,
count(o.order_id) as total_orders
from orders as o
join
customers as c
on c.customer_id=o.customer_id
join
order_items as oi
on
oi.order_id=o.order_id
group by 1,2
having 
count(o.order_id)>5;



/*
q4 montlhy sales trend
query monthly total sale over the past year.
challenge : display the sale trend, group, by month, return current_month sale,last month sale*/


select * from orders;
select * from order_items;

select
extract(month from o.order_date) as months,
extract(year from o.order_date) as years,
round(sum(oi.total_sales::numeric),2) as current_month_sale,
lag(round(sum(oi.total_sales::numeric),2),1,0) 
over( order by extract(year from o.order_date),extract(month from o.order_date))
as last_month_sale
from 
orders as o
join 
order_items as oi
on
o.order_id=oi.order_id
group by
1,2
order by
2,1;


/*
q5
customers with no purchases
find customers who have registered but never placed an order
challenge list customer details and the time since there registration
*/
select * from orders;
select distinct(customer_id) from orders;
select * from customers;
select distinct(customer_id) from customers;

select customer_id,
concat (first_name,' ',last_name) as full_name
from customers
where 
customer_id not in (select distinct(customer_id) from orders);

/*
q6 least-selling categories by state
identify the best-selling product category for each state
challenge : include the total sale for that category within each state*/

select distinct(state) from customers;
select distinct(category_id) from products;
select * from order_items;
select * from orders;

-- -o-oi -p-c
select state,category_id from(
select 
c.state,
p.category_id,
count(oi.quantity),
row_number() over (partition by c.state order by count(oi.quantity) asc ) as rank_sales
from
orders as o
join 
order_items as oi
on
oi.order_id=o.order_id
join
products as p
on
p.product_id=oi.product_id
join
customers as c
on
c.customer_id=o.customer_id
group by 1,2
order by 1) as k
where k.rank_sales=1;

/*
q7 customer lifetime value (cltv)
calculate the total value of order placed by each customer over their lifetime 
challenge : rank the customer based on cltv*/

-- customer-order-order_items

select * from order_items;

select 
o.customer_id,
concat(first_name,' ',last_name),
sum(oi.total_sales) as cltv,
dense_rank () over(order by sum(oi.total_sales) desc) as rank_customer
from customers as c
join
orders as o
on
o.customer_id=c.customer_id
join
order_items as oi
on
oi.order_id=o.order_id
group by 1,2
order by 3 desc;

select * from order_items;


/*q8 inventory stock alerts
query product with stock level below a certain thershold( eg less than 10 units)
challenge: include last restock date and warehouse information product name
*/



select 
p.product_name,
i.last_stock_date,
i.warehouse_id,
i.stock
from inventory as i 
join
products as p
on
p.product_id=i.product_id
where
i.stock<10
order by 
i.stock;

/*
q9 shipping delay
identify order where the shipping date is late that 3 days after the order date
challenge : include customer, order details, and delivery proider*/





select * from shippings;

select * from orders;

select 
concat(c.first_name,' ',c.last_name) as full_name,
p.product_name,
oi.quantity,
o.order_date,
s.shipping_date,
s.shipping_providers,
s.shipping_date-o.order_date as shipping_time
from 
orders as o
join
shippings as s
on
o.order_id=s.order_id
join 
order_items as oi
on
oi.order_id=o.order_id
join customers as c
on
o.customer_id=c.customer_id
join products as p 
on
p.product_id=oi.product_id
where 
s.shipping_date-o.order_date>=3
order by 
s.shipping_date-o.order_date desc;

/*
q10
payment success rate
calculate the percentage of successful payment accross all order ,
challenge: include breakdoun by payment status (eg faild,pending)
*/

select * from payments;
select * from orders;

select distinct(payment_status) from payments;

select 
*
from 
payments as p
join 
orders as o
on
o.order_id=p.order_id;
select 
distinct(payment_status),
count(*) as counts,
(select count(*) from payments) as total_transaction,
round(count(*):: numeric/(select count(*) from payments),2) * 100 as per_transaction
from payments
group by
1;







-- q11 product profit margin 
/* calculate the profit margin for each product (dufferent between price and cost of good sold)
challenge rank product by there profit margin ,showing higest to lowest*/

-- products order_items
select * from  order_items;

select
p.product_id,
p.product_name,
sum(oi.total_sales-(p.cogs*oi.quantity)) as profit,
dense_rank() over(order by sum(oi.total_sales-(p.cogs*oi.quantity)) desc) as profit_margin_rank
from products 
as p
join 
order_items
as 
oi
on
p.product_id=oi.product_id
group by
1,2;

/*
12 most returned product
Query the top 10 product by the number of return
challenge : display the return rate as a percentace of total unit sold for each product
*/

-- oi s p

select 
	p.product_id,
	p.product_name,
	count(*) as total_unit_sold,
	sum(case when o.order_status='Returned' then 1 else 0 end) as total_returnd,
	round(sum(case when o.order_status='Returned' then 1 else 0 end)::numeric/count(*)::numeric*100,2) as  per_return
from
order_items as oi
join
products as p
on
oi.product_id=p.product_id
join
orders as o
on
o.order_id=oi.order_id
group by 1,2
order by
round(sum(case when o.order_status='Returned' then 1 else 0 end)::numeric/count(*)::numeric*100,2) desc 
limit 10;

/*Q13identify  sellers who havent made any sale in the last 18 month
challenge : show the last sale date and total sale from those date
*/

-- sellers orders
with cte1 as(
select * from sellers
where seller_id not in 
(select seller_id from orders where order_date >= current_date - interval '18 month')
)
select 
o.seller_id,
max(o.order_date) as last_sale_date,
max(oi.total_sales) as last_sale_amount
from orders as o
join
cte1
on
cte1.seller_id=o.seller_id
join order_items as oi
on
o.order_id=oi.order_id
group by 1;




/*
Q14identify customer into returning or new
if the customer has done more than 5 returns catergorize them as returning otherwise nwe
challenge : list customer_id,name,toatl_orders,total return*/
select 
full_name as customers,
total_orders,
total_return,
case
	when total_return >5 then 'Returning_customers' else 'New'
end as cx_category from (
select 
	concat(c.first_name,' ',c.last_name) as full_name,
	c.customer_id,
	count(*) total_orders,
	sum(case when o.order_status='Returned' then 1 else 0 end) as total_return
from orders as o
join
customers as c
on
c.customer_id=o.customer_id
join
order_items as oi
on
oi.order_id=o.order_id
group by 1,2)
;

select * from customers;

/*
Q15
top 5 customers by orders in each status.
challenge : include the number of orders and total sale for each customers*/

-- oi-o-c
select * from customers;
select * from order_items;


select * from (
select 
concat(c.first_name,' ',c.last_name) as full_name,
c.state,
count(*) as total_order,
sum(oi.total_sales) as sales,
dense_rank() over (partition by c.state order by sum(oi.total_sales) desc) rank_state
from 
order_items as oi
join 
orders
as o
on
o.order_id=oi.order_id
join
customers as c
on
c.customer_id=o.customer_id
group by 1,2
) as tab_1
where 
rank_state <=5;

/*
Q16
revenue by shipping providered
calaculate the total number of orders handled and the average time for each provider*/

select * from shippings;
select * from order_items;

select * from orders;

select 
s.shipping_providers as shipping_providers,
coalesce(avg(s.shipping_date-o.order_date),0) as average_time,
count(*) as total_order,
round(sum(oi.total_sales)::numeric,2) as sum_of_sales
from 
shippings as s
join 
order_items as oi 
on
s.order_id=oi.order_id
join
orders as o
on
o.order_id=oi.order_id
group by 1 ;



/*
Q17
top 10 product with decreasing revenue ratio compare to last year(2022) and currentyear(2023)
challenge: return productId , product name,category name  2022 and 2023 revenue decreass ratio 
decratio=cr-ls/ls*100 (cs=current_year ls=last_year)*/

with last_year_sale as (
select 
	p.product_id,
	p.product_name,
	sum(oi.total_sales) as revenue
from orders as o
join 
order_items as oi
on 
oi.order_id=o.order_id
join
products as p
on
p.product_id=oi.product_id
where extract(year from o.order_date) = 2022
group by 1,2),
current_year_sale
as(
select 
	p.product_id,
	p.product_name,
	sum(oi.total_sales) as revenue
from orders as o
join 
order_items as oi
on 
oi.order_id=o.order_id
join
products as p
on
p.product_id=oi.product_id
where extract(year from o.order_date) = 2023
group by 1,2)
select 
cs.product_id,
ls.revenue as last_year_rev,
cs.revenue as cu_year_rev,
(cs.revenue-ls.revenue)*-1 as rev_diff,
round((cs.revenue-ls.revenue )::numeric/ls.revenue::numeric *100,2) as revenue_dec_ratio
from last_year_sale as ls
join current_year_sale as cs
on
ls.product_id=cs.product_id
where 
	ls.revenue>cs.revenue
order by 4 desc limit 10;




























































